AC_PREREQ([2.68])
AC_INIT(TOPP, 1.0, caron@ynl.t.u-tokyo.ac.jp)
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADERS([config.h])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_MAKE_SET

AC_ARG_WITH(openrave, [  --with-openrave           build TOPP with OpenRAVE integration])

if test "$with_openrave" != ""
then
    AC_SUBST(target, "full")
    AC_SUBST(EXTRA_FLAGS, "-DWITH_OPENRAVE")
    AC_CHECK_LIB([openrave0.9], 
                 [_ZNK8OpenRAVE7KinBody12GetDOFValuesERSt6vectorIdSaIdEERKS1_IiSaIiEE], 
                 [],
                 [AC_MSG_ERROR([

OpenRAVE was not found on your system.
])])
else
    AC_SUBST(target, "standalone")
fi

# Checks for libraries.

AC_CHECK_LIB([boost_python], 
             [_init], 
             [], 
             [AC_MSG_ERROR([

Boost.Python was not found on your system.
])])

AC_CHECK_LIB([lapack], 
             [cgels_], 
             [],
             [AC_MSG_WARN([

LAPACK was not found on your system. It is required to compute contact forces
in ZMPTorqueLimits (full version only).
])])

# Checks for header files.

AC_LANG_PUSH([C++])  # seems required for .hpp files

AC_CHECK_HEADERS([boost/numeric/bindings/traits/ublas_matrix.hpp],
                 [],
                 [AC_MSG_WARN([

The numeric library bindings for Boost UBlas are required if you want to use
ZMPTorqueLimits (full version only). You can get them from:

    http://mathema.tician.de/software/boost-numeric-bindings/
])])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL

# Checks for library functions.
AC_CHECK_FUNCS([sqrt])

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
